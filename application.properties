#Global configuration
spring.application.name=saasCommerce app
app.base.url=https://localhost:9000
spring.devtools.restart.enabled=true
# Swagger configuration
springdoc.show-actuator=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
# Packages to include
springdoc.packagesToScan=io.dexproject
#Tomcat configuration
server.address=localhost
server.port=9000
server.compression.enabled=true
server.servlet.session.cookie.http-only=true
###### HTTPS Properties ######
# The path to the keystore containing the certificate
server.ssl.key-store=keystore.p12
# The password used to generate the certificate
server.ssl.key-store-password=JHR&LH.kQ#eFQj5
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.keyStoreType=PKCS12
# The alias mapped to the certificate
server.ssl.keyAlias=tomcat
####### Data-Source Properties #######
# MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/saascommerce-db?useUnicode=yes&characterEncoding=UTF-8&characterSetResults=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=admin
spring.datasource.password=2+2Font4
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Initialize the datasource with available DDL and DML scripts
spring.datasource.initialization-mode=always
###### JPA Properties ######
spring.jpa.database=mysql
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.dialect.storage_engine=innodb
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.open-in-view=false
spring.jpa.defer-datasource-initialization=true
spring.data.jpa.repositories.enabled=true
spring.data.jpa.repositories.bootstrap-mode=deferred
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# Jackson Properties
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.time-zone=UTC
spring.jackson.serialization.indent-output=true
# Log level configuration
# Spring Boot supports all logger levels such as “TRACE”, “DEBUG”, “INFO”, “WARN”, “ERROR”, “FATAL”, “OFF”. 
logging.level.root=ERROR
logging.level.io.dexproject=INFO
logging.level.org.springframework.boot.autoconfigure.h2=INFO
logging.level.org.springframework.boot.web.embedded.tomcat=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.web=DEBUG
## Spring Profiles
spring.profiles.active=prod
###### Email Properties ######
#smtp mail properties
################### GMail Configuration ##########################
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=vnlangessama@gmail.com
spring.mail.password=lafxellznwtzknhd
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.transport.protocol=smtps
spring.mail.properties.mail.smtps.auth=true
spring.mail.properties.mail.smtps.starttls.enable=true
spring.mail.properties.mail.smtps.timeout=8000
# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port=465
#spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
# Social login provider props
spring.security.oauth2.client.registration.google.clientId=<your-client-id>
spring.security.oauth2.client.registration.google.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.facebook.clientId=<your-client-id>
spring.security.oauth2.client.registration.facebook.clientSecret=<your-client-secret>
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
spring.security.oauth2.client.registration.github.clientId=<your-client-id>
spring.security.oauth2.client.registration.github.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.clientId=<your-client-id>
spring.security.oauth2.client.registration.linkedin.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.client-authentication-method=post
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile, r_emailaddress
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.client-name=Linkedin
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
linkedin.email.address.uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=https://localhost:9000/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# Utiliser le bac à sable pour les tests et en direct pour la production
paypal.mode=sandbox
paypal.client.id=AYSq3RDGsmBLJE-otTkBtM-jBRd1TCQwFf9RGfwddNXWz0uFU9ztymylOhRS
paypal.client.secret=EGnHDxD_qRPdaLdZz8iCr8N7_MzF-YHPTkjs6NKYQvQSBngp4PTTVWkPZRbL
###### JWT Properties ######
app.jwt.secret=YjYxNjliODk1MTRmOGViY2Y2NTc0OWYxNzVmZDEwMjg1NmIyM2YwYzY0ODAzZDEyYjM2M2JjNmU3ZDExYjI4NGY1MzcxMjljZGZjNjI5MTI3NjQ1NjIyZDQzOTM5YjY1N2JiNA==
app.jwt.expiration=86400000
###### Paiement API Properties ######
################### Paiement Configuration ##########################
app.web.url=https://paid.ktc-center.net
app.template.url=https://paid.ktc-center.net/assets/templates/
app.account.validation.url=https://paid.ktc-center.net/#/validation/
app.password.reset.url=https://paid.ktc-center.net/#/passwordReset/
app.account.validation.success.url="https://paid.ktc-center.ne/account/valiationSuccess"
app.account.validation.failed.url="https://paid.ktc-center.ne/account/valiationFailed"